// src/components/MoldList.js

import React, {useState, useEffect, useCallback} from 'react';
import {supabase} from '../supabaseClient';
import {useNavigate, Link} from 'react-router-dom';
import {
    Paper,
    Button,
    CircularProgress,
    Alert,
    Typography,
    TextField,
    useMediaQuery,
    useTheme,
    Select,
    MenuItem,
    TableContainer,
    Table,
    TableHead,
    TableRow,
    TableCell,
    TableBody,
} from '@mui/material';
import {styled} from '@mui/material/styles';

const StyledTableCell = styled(TableCell)(({theme}) => {
    const isSmallScreen = theme.breakpoints.down('sm');
    return {
        [`&.owner-id`]: {
            display: 'table-cell',
            [isSmallScreen]: {
                display: 'none',
            },
        },
    };
});

const StyledTableRow = styled(TableRow)(() => ({}));

function MoldList() {
    const [molds, setMolds] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const navigate = useNavigate();
    const [newMoldId, setNewMoldId] = useState('');
    const [newStatus, setNewStatus] = useState('');
    const [newStatusDate, setNewStatusDate] = useState('');
    const [newInspectionStatus, setNewInspectionStatus] = useState('');
    const [newInspector, setNewInspector] = useState('');
    // const [newOwnerId, setNewOwnerId] = useState('');
    const [newMoldCount, setNewMoldCount] = useState('');
    const [isAddingNew, setIsAddingNew] = useState(false);
    const theme = useTheme();
    const isMobile = useMediaQuery(theme.breakpoints.down('sm'));

    const fetchMolds = useCallback(async () => {
        try {
            const {data, error} = await supabase.from('molds').select('*');
            if (error) throw error;
            setMolds(data);
        } catch (err) {
            setError(err.message);
        } finally {
            setLoading(false);
        }
    }, [supabase]);

    useEffect(() => {
        fetchMolds();
    }, [fetchMolds]);

    const handleLogout = async () => {
        await supabase.auth.signOut();
        navigate('/');
    };

    const handleDelete = async (id) => {
        try {
            const {error} = await supabase.from('molds').delete().eq('id', id);
            if (error) throw error;
            setMolds(molds.filter((mold) => mold.id !== id));
        } catch (err) {
            setError(err.message);
        }
    };

    const handleAddNewClick = () => {
        setIsAddingNew(true);
    };

    const handleCancelAdd = () => {
        setIsAddingNew(false);
        setNewMoldId('');
        setNewStatus('');
        setNewStatusDate('');
        setNewInspectionStatus('');
        setNewInspector('');
        // setNewOwnerId('');
        setNewMoldCount('');
    };

    const handleSaveNewMold = async () => {
        if (!newMoldId) {
            alert('몰드 ID를 입력해주세요.');
            return;
        }
        try {
            // 현재 사용자 세션 정보 가져오기
            const {data: session, error: sessionError} = await supabase.auth.getSession();

            // 세션 정보가 없거나 사용자 ID가 없는 경우 에러 처리
            if (sessionError || !session?.session?.user?.id) {
                alert('로그인 후 이용해주세요.');
                return;
            }

            // 현재 로그인한 사용자의 UUID
            const currentUserId = session.session.user.id;

            const {error} = await supabase.from('molds').insert([
                {
                    mold_id: newMoldId,
                    status: newStatus,
                    status_date: newStatusDate,
                    inspection_status: newInspectionStatus,
                    inspector: newInspector,
                    owner_id: currentUserId, // 현재 사용자 ID를 owner_id에 할당
                    mold_count: parseInt(newMoldCount, 10) || 0,
                },
            ]);
            if (error) throw error;
            handleCancelAdd();
            fetchMolds();
            alert('새 몰드가 추가되었습니다.');
        } catch (err) {
            setError(err.message);
        }
    };

    if (loading) return <CircularProgress/>;
    if (error) return <Alert severity="error">{error}</Alert>;

    return (
        <div>
            <h2>몰드 목록</h2>
            <Button variant="contained" color="primary" onClick={handleAddNewClick} style={{marginBottom: '10px'}}>
                새 몰드 추가
            </Button>

            {isAddingNew && (
                <Paper style={{padding: '15px', marginBottom: '10px'}}>
                    <Typography variant="h6">새 몰드 추가</Typography>
                    <TextField
                        label="몰드 ID"
                        value={newMoldId}
                        onChange={(e) => setNewMoldId(e.target.value)}
                        fullWidth
                        margin="normal"
                    />
                    <Select
                        label="상태"
                        value={newStatus}
                        onChange={(e) => setNewStatus(e.target.value)}
                        fullWidth
                        margin="normal"
                    >
                        <MenuItem value="Received">Received</MenuItem>
                        <MenuItem value="Shipped">Shipped</MenuItem>
                        {/* 필요한 상태 옵션 추가 */}
                    </Select>
                    <TextField
                        label="상태 날짜/시간"
                        type="datetime-local"
                        value={newStatusDate}
                        onChange={(e) => setNewStatusDate(e.target.value)}
                        fullWidth
                        margin="normal"
                    />
                    <Select
                        label="검사 상태"
                        value={newInspectionStatus}
                        onChange={(e) => setNewInspectionStatus(e.target.value)}
                        fullWidth
                        margin="normal"
                    >
                        <MenuItem value="WAITING">WAITING</MenuItem>
                        <MenuItem value="PASS">PASS</MenuItem>
                        <MenuItem value="FAIL">FAIL</MenuItem>
                        {/* 필요한 검사 상태 옵션 추가 */}
                    </Select>
                    <TextField
                        label="검사자"
                        value={newInspector}
                        onChange={(e) => setNewInspector(e.target.value)}
                        fullWidth
                        margin="normal"
                    />
                    {/*}
          <TextField
            label="소유자 ID"
            value={newOwnerId}
            onChange={(e) => setNewOwnerId(e.target.value)}
            fullWidth
            margin="normal"
          />
          */}
                    <TextField
                        label="몰드 카운트"
                        type="number"
                        value={newMoldCount}
                        onChange={(e) => setNewMoldCount(e.target.value)}
                        fullWidth
                        margin="normal"
                    />
                    <Button variant="contained" color="primary" onClick={handleSaveNewMold}
                            style={{marginRight: '10px'}}>
                        저장
                    </Button>
                    <Button variant="outlined" onClick={handleCancelAdd}>
                        취소
                    </Button>
                </Paper>
            )}

            {isMobile ? (
                molds.map((mold) => (
                    <Paper key={mold.id} style={{margin: '10px', padding: '15px'}}>
                        <Typography variant="subtitle1">몰드 ID: {mold.mold_id}</Typography>
                        <Typography variant="body2">상태: {mold.status}</Typography>
                        <Typography variant="body2">상태 날짜: {mold.status_date}</Typography>
                        <Typography variant="body2">검사 상태: {mold.inspection_status}</Typography>
                        <Typography variant="body2">검사자: {mold.inspector}</Typography>
                        <Typography variant="body2" className="owner-id">소유자 ID: {mold.owner_id}</Typography>
                        <Typography variant="body2">몰드 카운트: {mold.mold_count}</Typography>
                        <Button size="small" color="secondary" onClick={() => handleDelete(mold.id)}
                                style={{marginRight: '5px'}}>
                            삭제
                        </Button>
                        <Link to={`/mold-edit/${mold.id}`} style={{textDecoration: 'none'}}>
                            <Button size="small" color="primary">수정</Button>
                        </Link>
                    </Paper>
                ))
            ) : (
                <TableContainer component={Paper} style={{marginTop: '20px', overflowX: 'auto'}}>
                    <Table>
                        <TableHead>
                            <TableRow>
                                <TableCell>ID</TableCell>
                                <TableCell>몰드 ID</TableCell>
                                <TableCell>상태</TableCell>
                                <TableCell>상태 날짜</TableCell>
                                <TableCell>검사 상태</TableCell>
                                <TableCell>검사자</TableCell>
                                <StyledTableCell className="owner-id">소유자 ID</StyledTableCell>
                                <TableCell>몰드 카운트</TableCell>
                                <TableCell>삭제</TableCell>
                                <TableCell>수정</TableCell>
                            </TableRow>
                        </TableHead>
                        <TableBody>
                            {molds.map((mold) => (
                                <StyledTableRow key={mold.id}>
                                    <TableCell>{mold.id}</TableCell>
                                    <TableCell>{mold.mold_id}</TableCell>
                                    <TableCell>{mold.status}</TableCell>
                                    <TableCell>{mold.status_date}</TableCell>
                                    <TableCell>{mold.inspection_status}</TableCell>
                                    <TableCell>{mold.inspector}</TableCell>
                                    <StyledTableCell className="owner-id">{mold.owner_id}</StyledTableCell>
                                    <TableCell>{mold.mold_count}</TableCell>
                                    <TableCell>
                                        <Button variant="outlined" color="secondary"
                                                onClick={() => handleDelete(mold.id)} size="small">
                                            삭제
                                        </Button>
                                    </TableCell>
                                    <TableCell>
                                        <Link to={`/mold-edit/${mold.id}`} style={{textDecoration: 'none'}}>
                                            <Button variant="outlined" color="primary" size="small">
                                                수정
                                            </Button>
                                        </Link>
                                    </TableCell>
                                </StyledTableRow>
                            ))}
                        </TableBody>
                    </Table>
                </TableContainer>
            )}

            <Button variant="contained" color="primary" onClick={handleLogout} style={{marginTop: '20px'}}>
                로그아웃
            </Button>
        </div>
    );
}

export default MoldList;
